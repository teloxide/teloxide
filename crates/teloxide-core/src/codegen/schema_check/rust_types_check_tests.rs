//! Generated by `codegen_types_checking`, do not edit by hand.

use crate::{
    codegen::schema_check::{api_schema::*, rust_types_check_codegen::*},
    types::*,
};
use schemars::schema_for;

#[test]
fn test_rust_objects() {
    let api_schema = get_api_schema();

    let exceptions = Exceptions::new(vec![
        Exception::ExpandTelegramReferece { reference: "InputFile".to_owned() },
        Exception::IgnoreObjectField {
            object: "ChatMember".to_owned(),
            field_name: "status".to_owned(),
        },
        Exception::IgnoreObjectField {
            object: "MessageReactionUpdated".to_owned(),
            field_name: "user".to_owned(),
        },
        Exception::IgnoreObjectField {
            object: "MessageReactionUpdated".to_owned(),
            field_name: "actor_chat".to_owned(),
        },
        Exception::IgnoreObjectField {
            object: "PollAnswer".to_owned(),
            field_name: "user".to_owned(),
        },
        Exception::IgnoreObjectField {
            object: "PollAnswer".to_owned(),
            field_name: "voter_chat".to_owned(),
        },
        Exception::IgnoreObjectField {
            object: "InaccessibleMessage".to_owned(),
            field_name: "date".to_owned(),
        },
        Exception::IgnoreObjectField {
            object: "User".to_owned(),
            field_name: "supports_inline_queries".to_owned(),
        },
        Exception::IgnoreObjectField {
            object: "User".to_owned(),
            field_name: "has_main_web_app".to_owned(),
        },
        Exception::IgnoreObjectField {
            object: "User".to_owned(),
            field_name: "can_connect_to_business".to_owned(),
        },
        Exception::IgnoreObjectField {
            object: "User".to_owned(),
            field_name: "can_read_all_group_messages".to_owned(),
        },
        Exception::IgnoreObjectField {
            object: "User".to_owned(),
            field_name: "can_join_groups".to_owned(),
        },
        Exception::IgnoreFieldRequiredObjectName {
            object: "TextQuote".to_owned(),
            field_name: "entities".to_owned(),
        },
        Exception::IgnoreFieldRequiredObjectName {
            object: "KeyboardMarkup".to_owned(),
            field_name: "input_field_placeholder".to_owned(),
        },
        Exception::IgnoreFieldRequiredObjectName {
            object: "KeyboardButtonRequestUsers".to_owned(),
            field_name: "max_quantity".to_owned(),
        },
        Exception::IgnoreFieldRequiredObjectName {
            object: "SuccessfulPayment".to_owned(),
            field_name: "order_info".to_owned(),
        },
        Exception::IgnoreFieldRequiredObjectName {
            object: "PreCheckoutQuery".to_owned(),
            field_name: "order_info".to_owned(),
        },
        Exception::IgnoreFieldRequiredObjectName {
            object: "MaybeInaccessibleMessage".to_owned(),
            field_name: "date".to_owned(),
        },
        Exception::IgnoreFieldRequiredName { field_name: "file_size".to_owned() },
        Exception::IgnoreFieldName { field_name: "source".to_owned() },
        Exception::IgnoreFieldName { field_name: "sticker_type".to_owned() },
        Exception::IgnoreFieldName { field_name: "transaction_type".to_owned() },
        Exception::IgnoreFieldName { field_name: "type".to_owned() },
    ]);

    let mut errors = vec![];

    check_object(
        api_schema.clone(),
        schema_for!(WebhookInfo),
        "WebhookInfo".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(User),
        "User".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(Chat),
        "Chat".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(ChatFullInfo),
        "ChatFullInfo".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(Message),
        "Message".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(MessageId),
        "MessageId".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(InaccessibleMessage),
        "InaccessibleMessage".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(MaybeInaccessibleMessage),
        "MaybeInaccessibleMessage".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(MessageEntity),
        "MessageEntity".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(TextQuote),
        "TextQuote".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(ExternalReplyInfo),
        "ExternalReplyInfo".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(ReplyParameters),
        "ReplyParameters".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(MessageOrigin),
        "MessageOrigin".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(PhotoSize),
        "PhotoSize".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(Animation),
        "Animation".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(Audio),
        "Audio".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(Document),
        "Document".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(Story),
        "Story".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(Video),
        "Video".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(VideoNote),
        "VideoNote".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(Voice),
        "Voice".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(PaidMediaInfo),
        "PaidMediaInfo".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(PaidMedia),
        "PaidMedia".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(PaidMediaPreview),
        "PaidMediaPreview".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(PaidMediaPhoto),
        "PaidMediaPhoto".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(PaidMediaVideo),
        "PaidMediaVideo".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(Contact),
        "Contact".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(Dice),
        "Dice".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(PollOption),
        "PollOption".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(InputPollOption),
        "InputPollOption".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(PollAnswer),
        "PollAnswer".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(Poll),
        "Poll".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(ChecklistTask),
        "ChecklistTask".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(Checklist),
        "Checklist".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(InputChecklistTask),
        "InputChecklistTask".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(InputChecklist),
        "InputChecklist".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(ChecklistTasksDone),
        "ChecklistTasksDone".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(ChecklistTasksAdded),
        "ChecklistTasksAdded".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(Location),
        "Location".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(Venue),
        "Venue".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(WebAppData),
        "WebAppData".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(ProximityAlertTriggered),
        "ProximityAlertTriggered".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(MessageAutoDeleteTimerChanged),
        "MessageAutoDeleteTimerChanged".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(ChatBoostAdded),
        "ChatBoostAdded".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(BackgroundFill),
        "BackgroundFill".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(BackgroundFillSolid),
        "BackgroundFillSolid".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(BackgroundFillGradient),
        "BackgroundFillGradient".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(BackgroundFillFreeformGradient),
        "BackgroundFillFreeformGradient".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(BackgroundType),
        "BackgroundType".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(BackgroundTypeFill),
        "BackgroundTypeFill".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(BackgroundTypeWallpaper),
        "BackgroundTypeWallpaper".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(BackgroundTypePattern),
        "BackgroundTypePattern".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(BackgroundTypeChatTheme),
        "BackgroundTypeChatTheme".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(ChatBackground),
        "ChatBackground".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(ForumTopicCreated),
        "ForumTopicCreated".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(ForumTopicClosed),
        "ForumTopicClosed".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(ForumTopicEdited),
        "ForumTopicEdited".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(ForumTopicReopened),
        "ForumTopicReopened".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(GeneralForumTopicHidden),
        "GeneralForumTopicHidden".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(GeneralForumTopicUnhidden),
        "GeneralForumTopicUnhidden".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(SharedUser),
        "SharedUser".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(UsersShared),
        "UsersShared".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(ChatShared),
        "ChatShared".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(WriteAccessAllowed),
        "WriteAccessAllowed".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(VideoChatScheduled),
        "VideoChatScheduled".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(VideoChatStarted),
        "VideoChatStarted".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(VideoChatEnded),
        "VideoChatEnded".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(VideoChatParticipantsInvited),
        "VideoChatParticipantsInvited".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(PaidMessagePriceChanged),
        "PaidMessagePriceChanged".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(DirectMessagePriceChanged),
        "DirectMessagePriceChanged".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(GiveawayCreated),
        "GiveawayCreated".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(Giveaway),
        "Giveaway".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(GiveawayWinners),
        "GiveawayWinners".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(GiveawayCompleted),
        "GiveawayCompleted".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(LinkPreviewOptions),
        "LinkPreviewOptions".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(UserProfilePhotos),
        "UserProfilePhotos".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(File),
        "File".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(WebAppInfo),
        "WebAppInfo".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(KeyboardMarkup),
        "ReplyKeyboardMarkup".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(KeyboardButton),
        "KeyboardButton".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(KeyboardButtonRequestUsers),
        "KeyboardButtonRequestUsers".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(KeyboardButtonRequestChat),
        "KeyboardButtonRequestChat".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(KeyboardButtonPollType),
        "KeyboardButtonPollType".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(KeyboardRemove),
        "ReplyKeyboardRemove".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(InlineKeyboardMarkup),
        "InlineKeyboardMarkup".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(InlineKeyboardButton),
        "InlineKeyboardButton".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(LoginUrl),
        "LoginUrl".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(SwitchInlineQueryChosenChat),
        "SwitchInlineQueryChosenChat".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(CopyTextButton),
        "CopyTextButton".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(CallbackQuery),
        "CallbackQuery".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(ForceReply),
        "ForceReply".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(ChatPhoto),
        "ChatPhoto".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(ChatInviteLink),
        "ChatInviteLink".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(ChatAdministratorRights),
        "ChatAdministratorRights".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(ChatMemberUpdated),
        "ChatMemberUpdated".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(ChatMember),
        "ChatMember".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(ChatJoinRequest),
        "ChatJoinRequest".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(ChatPermissions),
        "ChatPermissions".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(Birthdate),
        "Birthdate".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(BusinessIntro),
        "BusinessIntro".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(BusinessLocation),
        "BusinessLocation".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(BusinessOpeningHoursInterval),
        "BusinessOpeningHoursInterval".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(BusinessOpeningHours),
        "BusinessOpeningHours".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(StoryAreaPosition),
        "StoryAreaPosition".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(LocationAddress),
        "LocationAddress".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(StoryAreaType),
        "StoryAreaType".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(StoryAreaTypeLocation),
        "StoryAreaTypeLocation".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(StoryAreaTypeSuggestedReaction),
        "StoryAreaTypeSuggestedReaction".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(StoryAreaTypeLink),
        "StoryAreaTypeLink".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(StoryAreaTypeWeather),
        "StoryAreaTypeWeather".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(StoryAreaTypeUniqueGift),
        "StoryAreaTypeUniqueGift".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(StoryArea),
        "StoryArea".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(ChatLocation),
        "ChatLocation".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(ReactionType),
        "ReactionType".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(ReactionCount),
        "ReactionCount".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(MessageReactionUpdated),
        "MessageReactionUpdated".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(MessageReactionCountUpdated),
        "MessageReactionCountUpdated".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(ForumTopic),
        "ForumTopic".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(Gift),
        "Gift".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(Gifts),
        "Gifts".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(UniqueGiftModel),
        "UniqueGiftModel".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(UniqueGiftSymbol),
        "UniqueGiftSymbol".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(UniqueGiftBackdropColors),
        "UniqueGiftBackdropColors".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(UniqueGiftBackdrop),
        "UniqueGiftBackdrop".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(UniqueGift),
        "UniqueGift".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(GiftInfo),
        "GiftInfo".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(UniqueGiftInfo),
        "UniqueGiftInfo".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(OwnedGift),
        "OwnedGift".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(OwnedGiftRegular),
        "OwnedGiftRegular".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(OwnedGiftUnique),
        "OwnedGiftUnique".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(OwnedGifts),
        "OwnedGifts".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(AcceptedGiftTypes),
        "AcceptedGiftTypes".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(StarAmount),
        "StarAmount".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(BotCommand),
        "BotCommand".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(BotCommandScope),
        "BotCommandScope".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(BotName),
        "BotName".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(BotDescription),
        "BotDescription".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(BotShortDescription),
        "BotShortDescription".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(MenuButton),
        "MenuButton".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(ChatBoostSource),
        "ChatBoostSource".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(ChatBoostSourcePremium),
        "ChatBoostSourcePremium".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(ChatBoostSourceGiftCode),
        "ChatBoostSourceGiftCode".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(ChatBoostSourceGiveaway),
        "ChatBoostSourceGiveaway".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(ChatBoost),
        "ChatBoost".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(ChatBoostUpdated),
        "ChatBoostUpdated".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(ChatBoostRemoved),
        "ChatBoostRemoved".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(UserChatBoosts),
        "UserChatBoosts".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(BusinessBotRights),
        "BusinessBotRights".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(BusinessConnection),
        "BusinessConnection".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(BusinessMessagesDeleted),
        "BusinessMessagesDeleted".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(ResponseParameters),
        "ResponseParameters".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(InputMedia),
        "InputMedia".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(InputMediaPhoto),
        "InputMediaPhoto".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(InputMediaVideo),
        "InputMediaVideo".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(InputMediaAnimation),
        "InputMediaAnimation".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(InputMediaAudio),
        "InputMediaAudio".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(InputMediaDocument),
        "InputMediaDocument".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(InputFile),
        "InputFile".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(InputPaidMedia),
        "InputPaidMedia".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(InputPaidMediaPhoto),
        "InputPaidMediaPhoto".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(InputPaidMediaVideo),
        "InputPaidMediaVideo".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(InputProfilePhoto),
        "InputProfilePhoto".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(InputProfilePhotoStatic),
        "InputProfilePhotoStatic".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(InputProfilePhotoAnimated),
        "InputProfilePhotoAnimated".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(InputStoryContent),
        "InputStoryContent".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(InputStoryContentPhoto),
        "InputStoryContentPhoto".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(InputStoryContentVideo),
        "InputStoryContentVideo".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(Sticker),
        "Sticker".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(StickerSet),
        "StickerSet".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(MaskPosition),
        "MaskPosition".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(InputSticker),
        "InputSticker".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(InlineQuery),
        "InlineQuery".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(InlineQueryResultsButton),
        "InlineQueryResultsButton".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(InlineQueryResult),
        "InlineQueryResult".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(InlineQueryResultArticle),
        "InlineQueryResultArticle".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(InlineQueryResultPhoto),
        "InlineQueryResultPhoto".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(InlineQueryResultGif),
        "InlineQueryResultGif".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(InlineQueryResultMpeg4Gif),
        "InlineQueryResultMpeg4Gif".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(InlineQueryResultVideo),
        "InlineQueryResultVideo".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(InlineQueryResultAudio),
        "InlineQueryResultAudio".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(InlineQueryResultVoice),
        "InlineQueryResultVoice".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(InlineQueryResultDocument),
        "InlineQueryResultDocument".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(InlineQueryResultLocation),
        "InlineQueryResultLocation".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(InlineQueryResultVenue),
        "InlineQueryResultVenue".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(InlineQueryResultContact),
        "InlineQueryResultContact".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(InlineQueryResultGame),
        "InlineQueryResultGame".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(InlineQueryResultCachedPhoto),
        "InlineQueryResultCachedPhoto".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(InlineQueryResultCachedGif),
        "InlineQueryResultCachedGif".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(InlineQueryResultCachedMpeg4Gif),
        "InlineQueryResultCachedMpeg4Gif".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(InlineQueryResultCachedSticker),
        "InlineQueryResultCachedSticker".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(InlineQueryResultCachedDocument),
        "InlineQueryResultCachedDocument".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(InlineQueryResultCachedVideo),
        "InlineQueryResultCachedVideo".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(InlineQueryResultCachedVoice),
        "InlineQueryResultCachedVoice".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(InlineQueryResultCachedAudio),
        "InlineQueryResultCachedAudio".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(InputMessageContent),
        "InputMessageContent".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(InputMessageContentText),
        "InputTextMessageContent".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(InputMessageContentLocation),
        "InputLocationMessageContent".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(InputMessageContentVenue),
        "InputVenueMessageContent".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(InputMessageContentContact),
        "InputContactMessageContent".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(InputMessageContentInvoice),
        "InputInvoiceMessageContent".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(ChosenInlineResult),
        "ChosenInlineResult".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(SentWebAppMessage),
        "SentWebAppMessage".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(PreparedInlineMessage),
        "PreparedInlineMessage".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(LabeledPrice),
        "LabeledPrice".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(Invoice),
        "Invoice".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(ShippingAddress),
        "ShippingAddress".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(OrderInfo),
        "OrderInfo".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(ShippingOption),
        "ShippingOption".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(SuccessfulPayment),
        "SuccessfulPayment".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(RefundedPayment),
        "RefundedPayment".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(ShippingQuery),
        "ShippingQuery".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(PreCheckoutQuery),
        "PreCheckoutQuery".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(PaidMediaPurchased),
        "PaidMediaPurchased".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(RevenueWithdrawalState),
        "RevenueWithdrawalState".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(RevenueWithdrawalStateSucceeded),
        "RevenueWithdrawalStateSucceeded".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(AffiliateInfo),
        "AffiliateInfo".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(TransactionPartner),
        "TransactionPartner".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(TransactionPartnerUser),
        "TransactionPartnerUser".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(TransactionPartnerChat),
        "TransactionPartnerChat".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(TransactionPartnerAffiliateProgram),
        "TransactionPartnerAffiliateProgram".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(TransactionPartnerFragment),
        "TransactionPartnerFragment".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(TransactionPartnerTelegramApi),
        "TransactionPartnerTelegramApi".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(StarTransaction),
        "StarTransaction".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(StarTransactions),
        "StarTransactions".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(PassportData),
        "PassportData".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(PassportFile),
        "PassportFile".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(EncryptedPassportElement),
        "EncryptedPassportElement".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(EncryptedCredentials),
        "EncryptedCredentials".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(PassportElementError),
        "PassportElementError".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(Game),
        "Game".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(CallbackGame),
        "CallbackGame".to_owned(),
        &mut errors,
        &exceptions,
    );
    check_object(
        api_schema.clone(),
        schema_for!(GameHighScore),
        "GameHighScore".to_owned(),
        &mut errors,
        &exceptions,
    );

    if !errors.is_empty() {
        let mut errors_string = String::new();
        for (i, error) in errors.iter().enumerate() {
            errors_string = format!("{errors_string}\n\n{}. {error}", i + 1);
        }
        panic!("schema.ron does not match the rust types. The errors are:\n\n{errors_string}",);
    }
}
