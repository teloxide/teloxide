//! Generated by `codegen_payloads`, do not edit by hand.

use serde::Serialize;

use crate::types::{
    BusinessConnectionId, ChatId, EffectId, InputChecklist, Message, ReplyMarkup, ReplyParameters,
};

impl_payload! {
    /// Use this method to send a checklist on behalf of a connected business account. On success, the sent [`Message`] is returned.
    ///
    /// [`Message`]: crate::types::Message
    #[derive(Debug, PartialEq, Eq, Hash, Clone, Serialize)]
    pub SendChecklist (SendChecklistSetters) => Message {
        required {
            /// Unique identifier of the business connection on behalf of which the message will be sent
            pub business_connection_id: BusinessConnectionId,
            /// Unique identifier for the target chat
            pub chat_id: ChatId [into],
            /// Checklist to send
            pub checklist: InputChecklist,
        }
        optional {
            /// Sends the message silently. Users will receive a notification with no sound
            pub disable_notification: bool,
            /// Protects the contents of sent messages from forwarding and saving
            pub protect_content: bool,
            /// Unique identifier of the message effect to be added to the message
            pub message_effect_id: EffectId,
            /// Description of the message to reply to
            pub reply_parameters: ReplyParameters,
            /// An inline keyboard
            pub reply_markup: ReplyMarkup [into],
        }
    }
}
