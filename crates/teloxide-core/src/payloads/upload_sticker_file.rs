//! Generated by `codegen_payloads`, do not edit by hand.

use serde::Serialize;

use crate::types::{File, InputFile, StickerFormat, UserId};

impl_payload! {
    @[multipart = sticker]
    /// Use this method to upload a file with a sticker for later use in the [CreateNewStickerSet], [AddStickerToSet] or [ReplaceStickerInSet] methods (the file can be used multiple times). Returns the uploaded [`File`] on success.
    ///
    /// [CreateNewStickerSet]: https://docs.rs/teloxide/latest/teloxide/payloads/struct.CreateNewStickerSet.html
    /// [AddStickerToSet]: https://docs.rs/teloxide/latest/teloxide/payloads/struct.AddStickerToSet.html
    /// [ReplaceStickerInSet]: https://docs.rs/teloxide/latest/teloxide/payloads/struct.ReplaceStickerInSet.html
    /// [`File`]: crate::types::File
    #[derive(Debug, Clone, Serialize)]
    pub UploadStickerFile (UploadStickerFileSetters) => File {
        required {
            /// User identifier of sticker file owner
            pub user_id: UserId,
            /// A file with the sticker in .WEBP, .PNG, .TGS, or .WEBM format. [Technical requirements]. [More info on Sending Files »]
            ///
            /// [More info on Sending Files »]: crate::types::InputFile
            /// [Technical requirements]: https://core.telegram.org/stickers
            pub sticker: InputFile,
            /// Format of the sticker, must be one of “static”, “animated”, “video”
            pub sticker_format: StickerFormat,
        }
    }
}
