//! Generated by `codegen_payloads`, do not edit by hand.

use serde::Serialize;

use crate::types::{
    BusinessConnectionId, EffectId, Message, Recipient, ReplyMarkup, ReplyParameters,
    SuggestedPostParameters, ThreadId, TopicId,
};

impl_payload! {
    /// Use this method to send information about a venue. On success, the sent [`Message`] is returned.
    ///
    /// [`Message`]: crate::types::Message
    #[derive(Debug, PartialEq, Clone, Serialize)]
    pub SendVenue (SendVenueSetters) => Message {
        required {
            /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
            pub chat_id: Recipient [into],
            /// Latitude of new location
            pub latitude: f64,
            /// Longitude of new location
            pub longitude: f64,
            /// Name of the venue
            pub title: String [into],
            /// Address of the venue
            pub address: String [into],
        }
        optional {
            /// Unique identifier of the business connection on behalf of which the message will be sent
            pub business_connection_id: BusinessConnectionId,
            /// Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
            pub message_thread_id: ThreadId,
            /// Identifier of the direct messages topic to which the message will be sent; required if the message is sent to a direct messages chat
            pub direct_messages_topic_id: TopicId,
            /// Foursquare identifier of the venue
            pub foursquare_id: String [into],
            /// Foursquare type of the venue, if known. (For example, “arts_entertainment/default”, “arts_entertainment/aquarium” or “food/icecream”.)
            pub foursquare_type: String [into],
            /// Google Places identifier of the venue
            pub google_place_id: String [into],
            /// Google Places type of the venue. (See [supported types].)
            ///
            /// [supported types]: https://developers.google.com/places/web-service/supported_types
            pub google_place_type: String [into],
            /// Sends the message [silently]. Users will receive a notification with no sound.
            ///
            /// [silently]: https://telegram.org/blog/channels-2-0#silent-messages
            pub disable_notification: bool,
            /// Protects the contents of sent messages from forwarding and saving
            pub protect_content: bool,
            /// Pass `true` to allow up to 1000 messages per second, ignoring broadcasting limits for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot's balance
            pub allow_paid_broadcast: bool,
            /// Unique identifier of the message effect to be added to the message; for private chats only
            pub message_effect_id: EffectId,
            /// An object containing the parameters of the suggested post to send; for direct messages chats only. If the message is sent as a reply to another suggested post, then that suggested post is automatically declined.
            pub suggested_post_parameters: SuggestedPostParameters,
            /// Description of the message to reply to
            pub reply_parameters: ReplyParameters,
            /// Additional interface options. A JSON-serialized object for an [inline keyboard], [custom reply keyboard], instructions to remove a reply keyboard or to force a reply from the user. Not supported for messages sent on behalf of a business account.
            ///
            /// [inline keyboard]: https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating
            /// [custom reply keyboard]: https://core.telegram.org/bots#keyboards
            pub reply_markup: ReplyMarkup [into],
        }
    }
}
